/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ import failed test ‡πÄ‡∏Ç‡πâ‡∏≤ TestRail
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test ‡∏ó‡∏µ‡πà failed ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ TestRail ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
 */

import { createSimpleFailedTest, createTestCaseFromError, onTestRailHelper, TestInfoAnalyzer } from "../index";

/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• test ‡∏ó‡∏µ‡πà failed (‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤)
 */
const failedTestData = {
  title: "All Clients - User is not on the last page behind login",
  status: "failed",
  duration: 33200, // 33.2s
  executedAt: new Date("2025-09-02T14:01:31"),
  executedBy: "Executed by Playwright"
};

/**
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ helper function (‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
 */
export async function importFailedTestSimple() {
  const testCaseInfo = createSimpleFailedTest(failedTestData.title, failedTestData.duration, failedTestData.executedAt);

  await onTestRailHelper.updateTestResultAdvanced(
    "Failed Tests Import - 9/2/2025",
    1995, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô section ID ‡∏à‡∏£‡∏¥‡∏á
    2, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô platform ID ‡∏à‡∏£‡∏¥‡∏á (2 = Web Desktop)
    [testCaseInfo]
  );

  console.log("‚úÖ Successfully imported failed test to TestRail");
}

/**
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á error message ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
export async function importFailedTestDetailed() {
  const errorMessage = [
    "‚ùå Test Failed",
    `‚è±Ô∏è Duration: ${TestInfoAnalyzer.formatDuration(failedTestData.duration)}`,
    `üïê Executed: ${failedTestData.executedAt.toLocaleString()}`,
    `ü§ñ ${failedTestData.executedBy}`,
    "",
    "Test execution completed but failed without specific error details."
  ].join("\n");

  const testCaseInfo = createTestCaseFromError(failedTestData.title, errorMessage, failedTestData.duration, [
    "@allClientPage",
    "@failed"
  ]);

  await onTestRailHelper.updateTestResultAdvanced(
    "Failed Tests Import - 9/2/2025",
    1995, // Section ID
    2, // Platform ID
    [testCaseInfo]
  );

  console.log("‚úÖ Successfully imported detailed failed test to TestRail");
}

/**
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏à‡∏≥‡∏•‡∏≠‡∏á Playwright TestInfo ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ analyzer
 */
export async function importFailedTestFromMockTestInfo() {
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á Playwright TestInfo
  const mockTestInfo = {
    title: failedTestData.title,
    status: "failed" as const,
    duration: failedTestData.duration,
    timeout: 30000,

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á error information
    result: {
      status: "failed" as const,
      duration: failedTestData.duration,
      error: {
        message: "Test execution failed",
        stack: undefined
      }
    },

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á steps
    steps: [
      {
        title: "Navigate to client page",
        category: "test.step",
        duration: 2000
      },
      {
        title: "Check user is not on last page",
        category: "test.step",
        duration: 31200,
        error: {
          message: "Test assertion failed or timed out",
          stack: undefined
        }
      }
    ],

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á project info
    project: { name: "chromium" },
    file: "/tests/client.spec.ts",
    line: 25,
    column: 3,
    workerIndex: 0,
    retry: 0
  };

  // ‡πÉ‡∏ä‡πâ analyzer ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô TestCaseInfo
  const testCaseInfo = TestInfoAnalyzer.convertToTestCaseInfo(mockTestInfo);

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging)
  const analysis = TestInfoAnalyzer.analyzeTestInfo(mockTestInfo);
  console.log("Test Analysis:", analysis);

  await onTestRailHelper.updateTestResultAdvanced(
    "Failed Tests Import - 9/2/2025",
    1995, // Section ID
    2, // Platform ID
    [testCaseInfo]
  );

  console.log("‚úÖ Successfully imported test using TestInfo analyzer");
}

/**
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: Batch import ‡∏´‡∏•‡∏≤‡∏¢ failed tests
 */
export async function importMultipleFailedTests() {
  const failedTests = [
    {
      title: "All Clients - User is not on the last page behind login",
      duration: 33200,
      errorMessage: "Test failed - Duration: 33.2s"
    },
    {
      title: "Login - User cannot access protected page",
      duration: 15000,
      errorMessage: "Authentication failed - Duration: 15.0s"
    },
    {
      title: "Navigation - Menu items not visible",
      duration: 8500,
      errorMessage: "UI elements not found - Duration: 8.5s"
    }
  ];

  const testCaseInfos = failedTests.map((test) =>
    createTestCaseFromError(test.title, test.errorMessage, test.duration, ["@failed", "@batch"])
  );

  await onTestRailHelper.updateTestResultAdvanced(
    "Batch Failed Tests Import - 9/2/2025",
    1995, // Section ID
    2, // Platform ID
    testCaseInfos
  );

  console.log(`‚úÖ Successfully imported ${failedTests.length} failed tests to TestRail`);
}

/**
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á custom error message ‡∏ï‡∏≤‡∏° context
 */
export async function importFailedTestWithContext() {
  const contextInfo = {
    browser: "Chromium",
    os: "macOS",
    environment: "staging",
    buildNumber: "v1.3.1",
    testSuite: "All Clients Suite"
  };

  const errorMessage = [
    "‚ùå Test Failed",
    "",
    "**Test Details:**",
    `‚Ä¢ Title: ${failedTestData.title}`,
    `‚Ä¢ Duration: ${TestInfoAnalyzer.formatDuration(failedTestData.duration)}`,
    `‚Ä¢ Executed: ${failedTestData.executedAt.toLocaleString()}`,
    "",
    "**Environment:**",
    `‚Ä¢ Browser: ${contextInfo.browser}`,
    `‚Ä¢ OS: ${contextInfo.os}`,
    `‚Ä¢ Environment: ${contextInfo.environment}`,
    `‚Ä¢ Build: ${contextInfo.buildNumber}`,
    `‚Ä¢ Test Suite: ${contextInfo.testSuite}`,
    "",
    "**Status:** Test execution completed but failed",
    "**Note:** No specific error message available from test execution"
  ].join("\n");

  const testCaseInfo = createTestCaseFromError(failedTestData.title, errorMessage, failedTestData.duration, [
    "@allClientPage",
    "@staging",
    "@chromium"
  ]);

  await onTestRailHelper.updateTestResultAdvanced(
    "Context Failed Tests - 9/2/2025",
    1995, // Section ID
    2, // Platform ID
    [testCaseInfo]
  );

  console.log("‚úÖ Successfully imported failed test with context to TestRail");
}

/**
 * Main function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
export async function main() {
  try {
    console.log("Starting failed test import examples...");

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
    await importFailedTestSimple();
    // await importFailedTestDetailed();
    // await importFailedTestFromMockTestInfo();
    // await importMultipleFailedTests();
    // await importFailedTestWithContext();

    console.log("All imports completed successfully!");
  } catch (error) {
    console.error("Import failed:", error);
  }
}

// Export configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
export const TESTRAIL_CONFIG = {
  sectionId: 1995, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô section ID ‡∏à‡∏£‡∏¥‡∏á
  platformId: 2, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô platform ID ‡∏à‡∏£‡∏¥‡∏á
  runName: "Failed Tests Import - 9/2/2025"
};

/**
 * Quick helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import test ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
 */
export async function quickImportFailedTest(
  title: string,
  duration: number,
  errorMessage?: string,
  sectionId: number = TESTRAIL_CONFIG.sectionId,
  platformId: number = TESTRAIL_CONFIG.platformId
) {
  const testCaseInfo = errorMessage
    ? createTestCaseFromError(title, errorMessage, duration)
    : createSimpleFailedTest(title, duration);

  await onTestRailHelper.updateTestResultAdvanced(TESTRAIL_CONFIG.runName, sectionId, platformId, [testCaseInfo]);

  console.log(`‚úÖ Imported: ${title}`);
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô quick helper
// await quickImportFailedTest(
//   "All Clients - User is not on the last page behind login",
//   33200,
//   "Test Failed - Duration: 33.2s, Executed: 9/2/2025, 2:01:31 PM"
// );
